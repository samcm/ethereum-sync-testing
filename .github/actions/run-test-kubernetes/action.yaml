name: Run test on Kubernetes
description: Runs an Ethereum test on Kubernetes

inputs:
  consensus:
    description: "The name of the consensus client to use (one of lighthouse, teku, prysm, nimbus, lodestar)."
    required: true
  execution:
    description: "The name of the execution client to use (one of geth, besu, nethermind)."
    required: true
  test:
    description: "The name of the test to run (one of basic, is-healthy, starts-syncing, complex1, complex2, complex3)."
    required: true
  network:
    description: "The name of the network to run the test against (one of ropsten, kiln)."
    required: true
  uploadDB:
    description: "Whether to upload the database to S3 after success/fail."
    default: false

runs:
  using: composite
  steps:
    - uses: actions/checkout@v1
    - name: Prepare environment
      shell: bash
      run: |
        mkdir $HOME/bin;
        export PATH=$HOME/bin:$PATH;
    - name: Create kube config
      shell: bash
      run: |
        mkdir -p $HOME/.kube/
        echo "${{ secrets.KUBECONFIG }}" > $HOME/.kube/config
        export KUBECONFIG=$HOME/.kube/config
        chmod 600 $HOME/.kube/config
    - name: Install stern
      shell: bash
      run: >
        export PATH=$HOME/bin:$PATH;
        curl https://github.com/stern/stern/releases/download/v1.21.0/stern_1.21.0_linux_amd64.tar.gz -L -o stern.tar.gz;
        tar -xvf stern.tar.gz;
        chmod +x stern;
        mv stern $HOME/bin/stern;
        stern --version;
    - name: Install rclone
      shell: bash
      run: |
        export PATH=$HOME/bin:$PATH;
        curl https://downloads.rclone.org/v1.58.1/rclone-v1.58.1-linux-amd64.zip -L -o rclone.zip;
        unzip rclone.zip -d rclone;
        mv rclone/rclone-v1.58.1-linux-amd64/rclone $HOME/bin/rclone;
        chmod +x $HOME/bin/rclone;
        rclone --version;
    - name: Install kubectl
      shell: bash
      run: |
        export PATH=$HOME/bin:$PATH;
        curl -LO "https://dl.k8s.io/release/v1.22.4/bin/linux/amd64/kubectl" -o kubectl;
        mv kubectl $HOME/bin/kubectl;
        chmod +x $HOME/bin/kubectl;
        kubectl version;
    - name: Install helm
      shell: bash
      run: |
        export PATH=$HOME/bin:$PATH;
        curl -LO https://get.helm.sh/helm-v3.8.0-linux-amd64.tar.gz
        tar -zxvf helm-v3.8.0-linux-amd64.tar.gz
        mv linux-amd64/helm $HOME/bin/helm
        helm version
    - name: Add helm repo
      shell: bash
      run: |
        export PATH=$HOME/bin:$PATH;
        helm repo add est https://samcm.github.io/ethereum-sync-test-helm-chart
    - name: Deploy
      shell: bash
      run: |
        export PATH=$HOME/bin:$PATH;
        export EXECUTION_PORT=$(cat deploy/p2p-node-ports.json | jq '."${{ inputs.network }}-${{ inputs.test }}-${{ inputs.consensus }}-${{ inputs.execution }}".execution')
        export CONSENSUS_PORT=$(cat deploy/p2p-node-ports.json | jq '."${{ inputs.network }}-${{ inputs.test }}-${{ inputs.consensus }}-${{ inputs.execution }}".consensus')
        helm upgrade --install --version 0.58.0 --namespace=ethereum --timeout 2m ${{ inputs.network }}-${{ inputs.test }}-${{ inputs.consensus }}-${{ inputs.execution }}-est-gh est/ethereum-sync-tests \
          -f ./deploy/values/values.yaml \
          -f https://raw.githubusercontent.com/samcm/ethereum-sync-test-helm-chart/main/charts/ethereum-sync-test/values/networks/${{ inputs.network }}.yaml \
          -f https://raw.githubusercontent.com/samcm/ethereum-sync-test-helm-chart/main/charts/ethereum-sync-test/values/tests/${{ inputs.test }}.yaml \
          -f https://raw.githubusercontent.com/samcm/ethereum-sync-test-helm-chart/main/charts/ethereum-sync-test/values/clients/consensus/${{ inputs.consensus }}.yaml \
          -f https://raw.githubusercontent.com/samcm/ethereum-sync-test-helm-chart/main/charts/ethereum-sync-test/values/clients/execution/${{ inputs.execution }}.yaml \
          --set global.ethereum.consensus.config.ports.p2p_tcp=$CONSENSUS_PORT \
          --set global.ethereum.consensus.config.ports.p2p_udp=$CONSENSUS_PORT \
          --set global.ethereum.execution.config.ports.p2p_tcp=$EXECUTION_PORT \
          --set global.ethereum.execution.config.ports.p2p_udp=$EXECUTION_PORT \
          --set common.coordinator.lameduckSeconds=1800 \
          --set cronjob.suspend=true \
          --set fullnameOverride="${{ inputs.network }}-${{ inputs.test }}-${{ inputs.consensus }}-${{ inputs.execution }}-est-gh"
    - name: Set kubectl namespace
      shell: bash
      run: |
        export PATH=$HOME/bin:$PATH;
        kubectl config set-context $(kubectl config current-context) --namespace=ethereum
    - name: Configure Rclone
      shell: bash
      run: |
        cat << EOF > rclone.conf
        [spaces]
          type = s3
          provider = DigitalOcean
          env_auth = true
          access_key_id = ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret_access_key = ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          endpoint = https://sgp1.digitaloceanspaces.com
          acl = public-read
        EOF
    - name: Make files directory
      shell: bash
      run: |
        mkdir -p files;
    - name: Change to files directory
      shell: bash
      run: |
        cd files;
    - name: Run test
      shell: bash
      run: |
        export PATH=$HOME/bin:$PATH;
        job=$(echo ${{ inputs.network }}-${{ inputs.test }}-${{ inputs.consensus }}-${{ inputs.execution }}-est-gh-$(date +%s));
        echo $job > job.txt;
        kubectl create job $job  --from cronjob/${{ inputs.network }}-${{ inputs.test }}-${{ inputs.consensus }}-${{ inputs.execution }}-est-gh;
        echo "Job $job created";
        stern --output raw --selector job-name=$job -c coordinator > coordinator.log &
        stern --output raw --selector job-name=$job -c metrics-exporter > metrics-exporter.log &
        stern --output raw --selector job-name=$job -c ${{ inputs.consensus }}-beacon > consensus.log &
        stern --output raw --selector job-name=$job -c ${{ inputs.execution }} > execution.log &
        stern --selector job-name=$job &
        echo "Log watchers created";
        # Watch the coordinator logs until it says the test is done.
        ( tail -f -n0 coordinator.log & ) | grep -q "test completed!";
        echo "Test completed!";
    - name: Upload artifacts to s3
      shell: bash
      run: |
        export PATH=$HOME/bin:$PATH;
        job=$(cat job.txt);
        pod=$(kubectl get pods -l job-name=$job -o custom-columns=":metadata.name" --no-headers);

        # Prepare the directory to upload
        kubectl exec -it $pod -c coordinator -- mkdir -p /data/files;

        echo "Compressing DBs";
        # kubectl exec -it $pod -c coordinator -- tar -zcvf /data/files/execution.db.tar.gz /data/execution;
        # kubectl exec -it $pod -c coordinator -- tar -zcvf /data/files/consensus.db.tar.gz /data/consensus;

        # Copy rclone to the pod
        echo "Copying rclone to the pod"
        kubectl cp -c coordinator $HOME/bin/rclone $pod:/data/rclone;
        kubectl cp -c coordinator rclone.conf $pod:/data/rclone.conf;

        # Copy log files back to the pod
        echo "Copying log files to the pod"
        kubectl cp -c coordinator coordinator.log $pod:/data/files/;
        kubectl cp -c coordinator metrics-exporter.log $pod:/data/files/;
        kubectl cp -c coordinator consensus.log $pod:/data/files/;
        kubectl cp -c coordinator execution.log $pod:/data/files/;

        # Copy the job name over to the pod
        kubectl cp -c coordinator job.txt $pod:/data/;

        # Upload all the files
        kubectl exec -it $pod -c coordinator -- ls -al /data/files/;
        kubectl exec -it $pod -c coordinator -- /data/rclone -vvvv copy --config /data/rclone.conf /data/files/ spaces://ethereum-sync-tests/tests/$job/;

        # Kill the coordinator to early-terminate the lameduck and save compute.
        kubectl exec -it $pod -c coordinator -- pkill -f -TERM coordinator;
        kubectl wait --timeout=-1s --for=condition=complete job/$job;

        echo "Job $job completed";
    - name: Print coordinator logs
      shell: bash
      run: >
        tail -n 500 coordinator.log;
    - name: Print metrics-exporter logs
      shell: bash
      run: >
        tail -n 500 metrics-exporter.log;
    - name: Print consensus logs
      shell: bash
      run: >
        tail -n 500 consensus.log;
    - name: Print execution logs
      shell: bash
      run: >
        tail -n 500 execution.log;
    - uses: actions/upload-artifact@v3
      with:
        name: coordinator.log
        path: coordinator.log
    - uses: actions/upload-artifact@v3
      with:
        name: metrics-exporter.log
        path: metrics-exporter.log
    - uses: actions/upload-artifact@v3
      with:
        name: consensus.log
        path: consensus.log
    - uses: actions/upload-artifact@v3
      with:
        name: execution.log
        path: execution.log
    - name: Print links
      shell: bash
      run: |
        job=$(cat job.txt);
        echo "Coordinator logs: https://sgp1.digitaloceanspaces.com/ethereum-sync-tests/tests/$job/coordinator.log";
        echo "Metrics Exporter logs: https://sgp1.digitaloceanspaces.com/ethereum-sync-tests/tests/$job/metrics-exporter.log";
        echo "Consensus logs: https://sgp1.digitaloceanspaces.com/ethereum-sync-tests/tests/$job/consensus.log";
        echo "Execution logs: https://sgp1.digitaloceanspaces.com/ethereum-sync-tests/tests/$job/execution.log";
        echo "Consensus Database: https://sgp1.digitaloceanspaces.com/ethereum-sync-tests/tests/$job/consensus.db.tar.gz";
        echo "Execution Database: https://sgp1.digitaloceanspaces.com/ethereum-sync-tests/tests/$job/execution.db.tar.gz";






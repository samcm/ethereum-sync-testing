name: Run test on Kubernetes
description: Runs an Ethereum test on Kubernetes

inputs:
  consensus:
    description: "The name of the consensus client to use (one of lighthouse, teku, prysm, nimbus, lodestar)."
    required: true
  execution:
    description: "The name of the execution client to use (one of geth, besu, nethermind)."
    required: true
  test:
    description: "The name of the test to run (one of basic, is-healthy, starts-syncing, complex1, complex2, complex3)."
    required: true
  network:
    description: "The name of the network to run the test against (one of ropsten, kiln)."
    required: true
  uploadDB:
    description: "Whether to upload the database to S3 after success/fail."
    default: false
  kubeConfig:
    description: "The KubeConfig file for the cluster to run the test on."
    required: true
  AWS_ACCESS_KEY_ID:
    description: "The s3 access key ID to use for uploading the database to S3."
    required: false
  AWS_SECRET_ACCESS_KEY:
    description: "The s3 secret access key to use for uploading the database to S3."
    required: false
  kubernetesCluster:
    description: "The name of the kubernetes cluster to run the test on ('kind' to run in the Runner instance, or 'do' to run on the EF Sync Testing Kube cluster)."
    required: true
    default: kind

outputs:
  job:
    description: "The name of the job that was run."
    value: ${{ steps.run-test.outputs.job }}

runs:
  using: composite
  steps:
    - uses: actions/checkout@v1
    - name: Prepare environment
      shell: bash
      run: |
        mkdir $HOME/bin;
        export PATH=$HOME/bin:$PATH;
        echo "Running Test ${{ inputs.test }} on ${{ inputs.network }} with ${{ inputs.consensus }} and ${{ inputs.execution }} on ${{ inputs.kubernetesCluster }}";
    - name: Check Kubernetes Cluster
      shell: bash
      run: |
        if [[ "${{ inputs.kubernetesCluster }}" != "kind" ]]; then
          echo "Running against remote Kubernetes cluster";
          exit 0;
        fi;

        if [[ "${{ inputs.kubernetesCluster }}" == "kind" ]]; then
          echo "Running against Kind cluster";
          exit 0;
        fi;

        echo "Unknown Kubernetes cluster: ${{ inputs.kubernetesCluster }}";
        exit 1;
    - name: Install kubectl
      shell: bash
      run: |
        export PATH=$HOME/bin:$PATH;
        curl -LO "https://dl.k8s.io/release/v1.22.4/bin/linux/amd64/kubectl" -o kubectl;
        mv kubectl $HOME/bin/kubectl;
        chmod +x $HOME/bin/kubectl;
    - name: Initialize Kubernetes engine
      if: ${{ inputs.kubernetesCluster != 'kind' }}
      shell: bash
      run: |
        export PATH=$HOME/bin:$PATH;
        mkdir -p $HOME/.kube/
        echo "Initializing Remote kubernetes engine"
        echo "${{ inputs.kubeConfig }}" > $HOME/.kube/config
        export KUBECONFIG=$HOME/.kube/config
        chmod 600 $HOME/.kube/config
        kubectl config set-context --current --namespace=ethereum
    - name: Initialize Kind Kubernetes engine
      if:  ${{ inputs.kubernetesCluster == 'kind' }}
      shell: bash
      run: |
        echo "Initializing Kind engine";
    - name: Create Kind cluster
      if: ${{ inputs.kubernetesCluster == 'kind' }}
      uses: helm/kind-action@v1.2.0
      with:
        config: ./.github/actions/run-test-kubernetes/kind.yaml
    - name: Create Ethereum namespace
      if:  ${{ inputs.kubernetesCluster == 'kind' }}
      shell: bash
      run: |
        export PATH=$HOME/bin:$PATH;
        echo "Creating ethereum namespace";
        kubectl create namespace ethereum;
        kubectl config set-context $(kubectl config current-context) --namespace=ethereum
    - name: Install stern
      shell: bash
      run: >
        export PATH=$HOME/bin:$PATH;
        curl https://github.com/stern/stern/releases/download/v1.21.0/stern_1.21.0_linux_amd64.tar.gz -L -o stern.tar.gz;
        tar -xvf stern.tar.gz;
        chmod +x stern;
        mv stern $HOME/bin/stern;
        stern --version;
    - name: Install helm
      shell: bash
      run: |
        export PATH=$HOME/bin:$PATH;
        curl -LO https://get.helm.sh/helm-v3.8.0-linux-amd64.tar.gz
        tar -zxvf helm-v3.8.0-linux-amd64.tar.gz
        mv linux-amd64/helm $HOME/bin/helm
        helm version
    - name: Add helm repo
      shell: bash
      run: |
        export PATH=$HOME/bin:$PATH;
        helm repo add est https://samcm.github.io/ethereum-sync-test-helm-chart
    - name: Deploy
      shell: bash
      run: |
        export PATH=$HOME/bin:$PATH;
        export EXECUTION_PORT=$(cat deploy/p2p-node-ports.json | jq '."${{ inputs.network }}-${{ inputs.test }}-${{ inputs.consensus }}-${{ inputs.execution }}".execution')
        export CONSENSUS_PORT=$(cat deploy/p2p-node-ports.json | jq '."${{ inputs.network }}-${{ inputs.test }}-${{ inputs.consensus }}-${{ inputs.execution }}".consensus')
        helm upgrade --install --version 0.73.0 --namespace=ethereum --timeout 2m ${{ inputs.network }}-${{ inputs.test }}-${{ inputs.consensus }}-${{ inputs.execution }}-est est/ethereum-sync-tests \
          -f ./deploy/values/values.yaml \
          -f ./deploy/values/engines/${{ inputs.kubernetesCluster }}.yaml \
          -f ./deploy/values/clients/consensus/${{ inputs.consensus }}.yaml \
          -f ./deploy/values/clients/execution/${{ inputs.execution }}.yaml \
          -f ./deploy/values/networks/${{ inputs.network }}.yaml \
          -f ./deploy/values/tests/${{ inputs.test }}.yaml \
          -f https://raw.githubusercontent.com/samcm/ethereum-sync-test-helm-chart/main/charts/ethereum-sync-test/values/networks/${{ inputs.network }}.yaml \
          -f https://raw.githubusercontent.com/samcm/ethereum-sync-test-helm-chart/main/charts/ethereum-sync-test/values/tests/${{ inputs.test }}.yaml \
          -f https://raw.githubusercontent.com/samcm/ethereum-sync-test-helm-chart/main/charts/ethereum-sync-test/values/clients/consensus/${{ inputs.consensus }}.yaml \
          -f https://raw.githubusercontent.com/samcm/ethereum-sync-test-helm-chart/main/charts/ethereum-sync-test/values/clients/execution/${{ inputs.execution }}.yaml \
          --set global.ethereum.consensus.config.ports.p2p_tcp=$CONSENSUS_PORT \
          --set global.ethereum.consensus.config.ports.p2p_udp=$CONSENSUS_PORT \
          --set global.ethereum.execution.config.ports.p2p_tcp=$EXECUTION_PORT \
          --set global.ethereum.execution.config.ports.p2p_udp=$EXECUTION_PORT \
          --set common.coordinator.lameduckSeconds=20 \
          --set cronjob.suspend=true \
          --set fullnameOverride="${{ inputs.network }}-${{ inputs.test }}-${{ inputs.consensus }}-${{ inputs.execution }}-est"
    - name: Make files directory
      shell: bash
      run: |
        mkdir -p files;
    - name: Change to files directory
      shell: bash
      run: |
        cd files;
    - name: Run test
      id: run-test
      shell: bash
      run: |
        export PATH=$HOME/bin:$PATH;
        job=$(echo ${{ inputs.network }}-${{ inputs.test }}-${{ inputs.consensus }}-${{ inputs.execution }}-est-$(date +%s));
        echo $job > job.txt;
        echo "::set-output name=job::$job"
        kubectl create job $job  --from cronjob/${{ inputs.network }}-${{ inputs.test }}-${{ inputs.consensus }}-${{ inputs.execution }}-est;
        echo "Job $job created";
        stern --output raw --selector job-name=$job -c coordinator > coordinator.log &
        # stern --output raw --selector job-name=$job -c metrics-exporter > metrics-exporter.log &
        # stern --output raw --selector job-name=$job -c ${{ inputs.consensus }}-beacon > consensus.log &
        # stern --output raw --selector job-name=$job -c ${{ inputs.execution }} > execution.log &
        echo "Log watchers created";
        kubectl get job $job -o yaml  > jobspec.yaml;
        stern --selector job-name=$job &
        #sleep 15;
        #kubectl describe pod $(kubectl get pods  -l job-name=$job --no-headers -o custom-columns=":metadata.name") > pod.yaml;
        #cat pod.yaml;

        # Watch the coordinator logs until it says the test is successful or not.
        ( tail -f -n0 coordinator.log & ) | grep -q "test completed!" &
        completion_pid=$!;
        ( tail -f -n0 coordinator.log & ) | grep -q "test failed!" && exit 1 &
        failure_pid=$!;
        wait -n $completion_pid $failure_pid;

        # store exit code in variable
        exit_code=$?;

        if (( $exit_code == 0 )); then
          echo "Job completed";
        else
          echo "Job failed with exit code ${exit_code}, exiting..."
        fi

        exit $exit_code
    - uses: actions/upload-artifact@v3
      if: ${{ always() }}
      with:
        name: ${{ steps.run-test.outputs.job}}-coordinator.log
        path: coordinator.log
    - uses: actions/upload-artifact@v3
      if: ${{ always() }}
      with:
        name: ${{ steps.run-test.outputs.job}}-metrics-exporter.log
        path: metrics-exporter.log
    - uses: actions/upload-artifact@v3
      if: ${{ always() }}
      with:
        name: ${{ steps.run-test.outputs.job}}-consensus.log
        path: consensus.log
    - uses: actions/upload-artifact@v3
      if: ${{ always() }}
      with:
        name: ${{ steps.run-test.outputs.job}}-execution.log
        path: execution.log
    - uses: actions/upload-artifact@v3
      if: ${{ always() }}
      with:
        name: ${{ steps.run-test.outputs.job}}-jobspec.yaml
        path: jobspec.yaml
    - name: Print links
      shell: bash
      if: ${{ always() }}
      run: |
        job=$(cat job.txt);
        echo "Coordinator logs: https://sgp1.digitaloceanspaces.com/ethereum-sync-tests/tests/$job/coordinator.log" > links.txt;
        echo "Metrics Exporter logs: https://sgp1.digitaloceanspaces.com/ethereum-sync-tests/tests/$job/metrics-exporter.log" >> links.txt;
        echo "Consensus logs: https://sgp1.digitaloceanspaces.com/ethereum-sync-tests/tests/$job/consensus.log" >> links.txt;
        echo "Execution logs: https://sgp1.digitaloceanspaces.com/ethereum-sync-tests/tests/$job/execution.log" >> links.txt;

        cat links.txt
    - uses: actions/upload-artifact@v3
      if: ${{ always() }}
      with:
        name: ${{ steps.run-test.outputs.job}}-links.txt
        path: links.txt





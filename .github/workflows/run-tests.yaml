name: Run test on Kubernetes
on:
  push:
    branches:
      - main
jobs:
  run-test:
    strategy:
      fail-fast: false
      matrix:
        consensus: [lighthouse]
        execution: [geth]
        network: [ropsten]
        test: [is-healthy]
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v1
      - name: Prepare environment
        run: |
          mkdir $HOME/bin;
          export PATH=$HOME/bin:$PATH;
      - name: Create kube config
        run: |
          mkdir -p $HOME/.kube/
          echo "${{ secrets.KUBECONFIG }}" > $HOME/.kube/config
          export KUBECONFIG=$HOME/.kube/config
          chmod 600 $HOME/.kube/config
      - name: Install helm
        run: |
          curl -LO https://get.helm.sh/helm-v3.8.0-linux-amd64.tar.gz
          tar -zxvf helm-v3.8.0-linux-amd64.tar.gz
          mv linux-amd64/helm $HOME/bin/helm
          helm version
      - name: Add helm repo
        run: |
          helm repo add est https://samcm.github.io/ethereum-sync-test-helm-chart
      - name: Deploy
        run: |
          helm upgrade --install --version 0.58.0 --namespace=ethereum --timeout 2m ${{ matrix.network }}-${{ matrix.test }}-${{ matrix.consensus }}-${{ matrix.execution }}-est-gh est/ethereum-sync-tests \
            -f ./deploy/values/values.yaml \
            -f https://raw.githubusercontent.com/samcm/ethereum-sync-test-helm-chart/main/charts/ethereum-sync-test/values/networks/${{ matrix.network }}.yaml \
            -f https://raw.githubusercontent.com/samcm/ethereum-sync-test-helm-chart/main/charts/ethereum-sync-test/values/tests/${{ matrix.test }}.yaml \
            -f https://raw.githubusercontent.com/samcm/ethereum-sync-test-helm-chart/main/charts/ethereum-sync-test/values/clients/consensus/${{ matrix.consensus }}.yaml \
            -f https://raw.githubusercontent.com/samcm/ethereum-sync-test-helm-chart/main/charts/ethereum-sync-test/values/clients/execution/${{ matrix.execution }}.yaml \
            --set global.ethereum.consensus.config.ports.p2p_tcp=30241 \
            --set global.ethereum.consensus.config.ports.p2p_udp=30241 \
            --set global.ethereum.execution.config.ports.p2p_tcp=30242 \
            --set global.ethereum.execution.config.ports.p2p_udp=30242 \
            --set common.coordinator.lameduckSeconds=1800 \
            --set cronjob.suspend=true \
            --set fullnameOverride="${{ matrix.network }}-${{ matrix.test }}-${{ matrix.consensus }}-${{ matrix.execution }}-est-gh"
      - name: Set kubectl namespace
        run: |
          kubectl config set-context $(kubectl config current-context) --namespace=ethereum
      - name: Install stern
        run: >
          curl https://github.com/stern/stern/releases/download/v1.21.0/stern_1.21.0_linux_amd64.tar.gz -L -o stern.tar.gz;
          tar -xvf stern.tar.gz;
          chmod +x stern;
          mv stern $HOME/bin/stern;
          stern --version;
      - name: Install rclone
        run: |
          curl https://downloads.rclone.org/v1.58.1/rclone-v1.58.1-linux-amd64.zip -L -o rclone.zip;
          unzip rclone.zip -d rclone;
          mv rclone/rclone-v1.58.1-linux-amd64/rclone $HOME/bin/rclone;
          chmod +x $HOME//bin/rclone;
          rclone --version;
      - name: Configure Rclone
        run: |
          cat << EOF > rclone.conf
          [spaces]
            type = s3
            provider = DigitalOcean
            env_auth = true
            access_key_id = ${{ secrets.AWS_ACCESS_KEY_ID }}
            secret_access_key = ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            endpoint = https://sgp1.digitaloceanspaces.com
            acl = public-read
          EOF
      - name: Make files directory
        run: |
          mkdir -p files;
      - name: Change to files directory
        run: |
          cd files;
      - name: Run test
        run: |
          job=$(echo ${{ matrix.network }}-${{ matrix.test }}-${{ matrix.consensus }}-${{ matrix.execution }}-est-gh-$(date +%s));
          echo $job > job.txt;
          kubectl create job $job  --from cronjob/${{ matrix.network }}-${{ matrix.test }}-${{ matrix.consensus }}-${{ matrix.execution }}-est-gh;
          echo "Job $job created";
          stern --output raw --selector job-name=$job -c coordinator > coordinator.log &
          stern --output raw --selector job-name=$job -c metrics-exporter > metrics-exporter.log &
          stern --output raw --selector job-name=$job -c ${{ matrix.consensus }}-beacon > consensus.log &
          stern --output raw --selector job-name=$job -c ${{ matrix.execution }} > execution.log &
          stern --selector job-name=$job &
          echo "Log watchers created";
          # Watch the coordinator logs until it says the test is done.
          ( tail -f -n0 coordinator.log & ) | grep -q "test completed!";
          echo "Test completed!";
      - name: Upload artifacts to s3
        run: |
          job=$(cat job.txt);
          pod=$(kubectl get pods -l job-name=$job -o custom-columns=":metadata.name" --no-headers);

          # Prepare the directory to upload
          kubectl exec -it $pod -c coordinator -- mkdir -p /data/files;

          echo "Compressing DBs";
          kubectl exec -it $pod -c coordinator -- tar -zcvf /data/files/execution.db.tar.gz /data/execution;
          kubectl exec -it $pod -c coordinator -- tar -zcvf /data/files/consensus.db.tar.gz /data/consensus;

          # Copy rclone to the pod
          echo "Copying rclone to the pod"
          kubectl cp -c coordinator /usr/local/bin/rclone $pod:/data/rclone;
          kubectl cp -c coordinator rclone.conf $pod:/data/rclone.conf;

          # Copy log files back to the pod
          echo "Copying log files to the pod"
          kubectl cp -c coordinator coordinator.log $pod:/data/files/;
          kubectl cp -c coordinator metrics-exporter.log $pod:/data/files/;
          kubectl cp -c coordinator consensus.log $pod:/data/files/;
          kubectl cp -c coordinator execution.log $pod:/data/files/;

          # Copy the job name over to the pod
          kubectl cp -c coordinator job.txt $pod:/data/;

          # Upload all the files
          kubectl exec -it $pod -c coordinator -- ls -al /data/files/;
          kubectl exec -it $pod -c coordinator -- /data/rclone -vvvv copy --config /data/rclone.conf /data/files/ spaces://ethereum-sync-tests/tests/$job/;

          # Kill the coordinator to early-terminate the lameduck and save compute.
          kubectl exec -it $pod -c coordinator -- pkill -f -TERM coordinator;
          kubectl wait --timeout=-1s --for=condition=complete job/$job;

          echo "Job $job completed";
      - name: Print coordinator logs
        run: >
          tail -n 500 coordinator.log;
      - name: Print metrics-exporter logs
        run: >
          tail -n 500 metrics-exporter.log;
      - name: Print consensus logs
        run: >
          tail -n 500 consensus.log;
      - name: Print execution logs
        run: >
          tail -n 500 execution.log;
      - uses: actions/upload-artifact@v3
        with:
          name: coordinator.log
          path: coordinator.log
      - uses: actions/upload-artifact@v3
        with:
          name: metrics-exporter.log
          path: metrics-exporter.log
      - uses: actions/upload-artifact@v3
        with:
          name: consensus.log
          path: consensus.log
      - uses: actions/upload-artifact@v3
        with:
          name: execution.log
          path: execution.log
      - name: Print links
        run: |
          job=$(cat job.txt);
          echo "Coordinator logs: https://sgp1.digitaloceanspaces.com/ethereum-sync-tests/tests/$job/coordinator.log";
          echo "Metrics Exporter logs: https://sgp1.digitaloceanspaces.com/ethereum-sync-tests/tests/$job/metrics-exporter.log";
          echo "Consensus logs: https://sgp1.digitaloceanspaces.com/ethereum-sync-tests/tests/$job/consensus.log";
          echo "Execution logs: https://sgp1.digitaloceanspaces.com/ethereum-sync-tests/tests/$job/execution.log";
          echo "Consensus Database: https://sgp1.digitaloceanspaces.com/ethereum-sync-tests/tests/$job/consensus.db.tar.gz";
          echo "Execution Database: https://sgp1.digitaloceanspaces.com/ethereum-sync-tests/tests/$job/execution.db.tar.gz";





